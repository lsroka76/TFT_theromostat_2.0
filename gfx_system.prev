#include <Arduino_GFX_Library.h>
#include <lvgl.h>
#include "touch.h"

#define GFX_BL 38

Arduino_DataBus *bus = new Arduino_SWSPI(
    GFX_NOT_DEFINED /* DC */, 39 /* CS */,
    48 /* SCK */, 47 /* MOSI */, GFX_NOT_DEFINED /* MISO */);

#define RGB_PANEL

Arduino_ESP32RGBPanel *rgbpanel = new Arduino_ESP32RGBPanel(
   18 /* DE */, 17 /* VSYNC */, 16 /* HSYNC */, 21 /* PCLK */,
   11 /* R0 */, 12 /* R1 */, 13 /* R2 */, 14 /* R3 */, 0 /* R4 */,
   8 /* G0 */, 20 /* G1 */, 3 /* G2 */, 46 /* G3 */, 9 /* G4 */, 10 /* G5 */,
   4 /* B0 */, 5 /* B1 */, 6 /* B2 */, 7 /* B3 */, 15 /* B4 */,
   1 /* hsync_polarity */, 10 /* hsync_front_porch */, 8 /* hsync_pulse_width */, 50 /* hsync_back_porch */,
    1 /* vsync_polarity */, 10 /* vsync_front_porch */, 8 /* vsync_pulse_width */, 20 /* vsync_back_porch */,1);

//Arduino_ESP32RGBPanel *rgbpanel = new Arduino_ESP32RGBPanel(
//    18 /* DE */, 17 /* VSYNC */, 16 /* HSYNC */, 21 /* PCLK */,
//    11 /* R0 */, 12 /* R1 */, 13 /* R2 */, 14 /* R3 */, 0 /* R4 */,
//    8 /* G0 */, 20 /* G1 */, 3 /* G2 */, 46 /* G3 */, 9 /* G4 */, 10 /* G5 */,
//    4 /* B0 */, 5 /* B1 */, 6 /* B2 */, 7 /* B3 */, 15 /* B4 */,
//    1 /* hsync_polarity */, 24 /* hsync_front_porch */, 6 /* hsync_pulse_width */, 18 /* hsync_back_porch */,
//    1 /* vsync_polarity */, 16 /* vsync_front_porch */, 4 /* vsync_pulse_width */, 10 /* vsync_back_porch */,1);


Arduino_RGB_Display *gfx = new Arduino_RGB_Display(
    480 /* width */, 480 /* height */, rgbpanel, 0 /* rotation */, true /* auto_flush */,
    bus, GFX_NOT_DEFINED /* RST */, st7701_type9_init_operations, sizeof(st7701_type9_init_operations));

//Arduino_RGB_Display *gfx = new Arduino_RGB_Display(
  //  480 /* width */, 480 /* height */, rgbpanel, 0 /* rotation */, true /* auto_flush */);



/*******************************************************************************
 * Please config the touch panel in touch.h
 ******************************************************************************/


/* Change to your screen resolution */
uint32_t screenWidth;
uint32_t screenHeight;

static lv_draw_buf_t draw_buf;
static lv_color_t *disp_draw_buf;

/* Display flushing */
void my_disp_flush (lv_display_t *disp, const lv_area_t *area, uint8_t *pixelmap)
{
  uint32_t w = ( area->x2 - area->x1 + 1 );
  uint32_t h = ( area->y2 - area->y1 + 1 );

  if (LV_COLOR_16_SWAP) {
    size_t len = lv_area_get_size( area );
    lv_draw_sw_rgb565_swap( pixelmap, len );
  }

  gfx->draw16bitRGBBitmap(area->x1, area->y1, (uint16_t *) pixelmap, w, h);

  lv_disp_flush_ready(disp);
}

void my_touchpad_read (lv_indev_t * indev_driver, lv_indev_data_t * data)
{
  if (touch_has_signal())
  {
    if (touch_touched())
    {
      data->state = LV_INDEV_STATE_PR;

      /*Set the coordinates*/
      data->point.x = touch_last_x;
      data->point.y = touch_last_y;

      Serial.print( "Data x :" );
      Serial.println( touch_last_x );

      Serial.print( "Data y :" );
      Serial.println( touch_last_y );

    }
    else if (touch_released())
    {
      data->state = LV_INDEV_STATE_REL;
    }
  }
  else
  {
    data->state = LV_INDEV_STATE_REL;
  }
}

/*Set tick routine needed for LVGL internal timings*/
static uint32_t my_tick_get_cb (void) { return millis(); }

void gfx_system_init()
{
  touch_init();
  
  //gfx->begin();
  gfx->begin(10000000); /* specify data bus speed */

  gfx->fillScreen(BLACK);

#ifdef GFX_BL
  pinMode(GFX_BL, OUTPUT);
  digitalWrite(GFX_BL, HIGH);
#endif

  lv_init();

  screenWidth = gfx->width();
  screenHeight = gfx->height();
#ifdef ESP32
  disp_draw_buf = (lv_color_t *)heap_caps_malloc(sizeof(lv_color_t) * screenWidth * screenHeight/4, MALLOC_CAP_SPIRAM);
#else
  disp_draw_buf = (lv_color_t *)malloc(sizeof(lv_color_t) * screenWidth * 200);
#endif
  //disp_draw_buf = (lv_color_t *)gfx->getFramebuffer();
  if (!disp_draw_buf)
  {
    Serial.println("LVGL disp_draw_buf allocate failed!");
  }
  else
  {
    
    static lv_disp_t* disp;
    
    disp = lv_display_create(screenWidth, screenHeight);
    
    lv_display_set_buffers( disp, disp_draw_buf, NULL, screenWidth * sizeof(lv_color_t) * screenHeight/4, LV_DISPLAY_RENDER_MODE_PARTIAL);
    lv_display_set_flush_cb( disp, my_disp_flush );

    static lv_indev_t* indev;
    indev = lv_indev_create();
    lv_indev_set_type( indev, LV_INDEV_TYPE_POINTER );
    lv_indev_set_read_cb( indev, my_touchpad_read );

    lv_tick_set_cb( my_tick_get_cb );

    Serial.println("Setup done");
}
}